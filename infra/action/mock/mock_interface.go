// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	action "github.com/jacklv111/optimus/infra/action"
)

// MockActionMgrInterface is a mock of ActionMgrInterface interface.
type MockActionMgrInterface struct {
	ctrl     *gomock.Controller
	recorder *MockActionMgrInterfaceMockRecorder
}

// MockActionMgrInterfaceMockRecorder is the mock recorder for MockActionMgrInterface.
type MockActionMgrInterfaceMockRecorder struct {
	mock *MockActionMgrInterface
}

// NewMockActionMgrInterface creates a new mock instance.
func NewMockActionMgrInterface(ctrl *gomock.Controller) *MockActionMgrInterface {
	mock := &MockActionMgrInterface{ctrl: ctrl}
	mock.recorder = &MockActionMgrInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionMgrInterface) EXPECT() *MockActionMgrInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActionMgrInterface) Create(resourceType, resourceId, aName, params string) (action.ActionDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", resourceType, resourceId, aName, params)
	ret0, _ := ret[0].(action.ActionDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActionMgrInterfaceMockRecorder) Create(resourceType, resourceId, aName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActionMgrInterface)(nil).Create), resourceType, resourceId, aName, params)
}

// Delete mocks base method.
func (m *MockActionMgrInterface) Delete(resourceType, resourceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", resourceType, resourceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActionMgrInterfaceMockRecorder) Delete(resourceType, resourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActionMgrInterface)(nil).Delete), resourceType, resourceId)
}

// ExistsByResourceTypeAndResourceId mocks base method.
func (m *MockActionMgrInterface) ExistsByResourceTypeAndResourceId(resourceType, resourceId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByResourceTypeAndResourceId", resourceType, resourceId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByResourceTypeAndResourceId indicates an expected call of ExistsByResourceTypeAndResourceId.
func (mr *MockActionMgrInterfaceMockRecorder) ExistsByResourceTypeAndResourceId(resourceType, resourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByResourceTypeAndResourceId", reflect.TypeOf((*MockActionMgrInterface)(nil).ExistsByResourceTypeAndResourceId), resourceType, resourceId)
}

// GetUpdateAtLessThan mocks base method.
func (m *MockActionMgrInterface) GetUpdateAtLessThan(time int64) ([]action.ActionDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateAtLessThan", time)
	ret0, _ := ret[0].([]action.ActionDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateAtLessThan indicates an expected call of GetUpdateAtLessThan.
func (mr *MockActionMgrInterfaceMockRecorder) GetUpdateAtLessThan(time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateAtLessThan", reflect.TypeOf((*MockActionMgrInterface)(nil).GetUpdateAtLessThan), time)
}

// Updates mocks base method.
func (m *MockActionMgrInterface) Updates(res action.ActionDo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockActionMgrInterfaceMockRecorder) Updates(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockActionMgrInterface)(nil).Updates), res)
}
