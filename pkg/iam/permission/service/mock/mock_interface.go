// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	valueobject "github.com/jacklv111/optimus/pkg/iam/permission/value-object"
)

// MockPermissionServiceInterface is a mock of PermissionServiceInterface interface.
type MockPermissionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceInterfaceMockRecorder
}

// MockPermissionServiceInterfaceMockRecorder is the mock recorder for MockPermissionServiceInterface.
type MockPermissionServiceInterfaceMockRecorder struct {
	mock *MockPermissionServiceInterface
}

// NewMockPermissionServiceInterface creates a new mock instance.
func NewMockPermissionServiceInterface(ctrl *gomock.Controller) *MockPermissionServiceInterface {
	mock := &MockPermissionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionServiceInterface) EXPECT() *MockPermissionServiceInterfaceMockRecorder {
	return m.recorder
}

// AddRoleForUserInDomain mocks base method.
func (m *MockPermissionServiceInterface) AddRoleForUserInDomain(domain, role, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleForUserInDomain", domain, role, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleForUserInDomain indicates an expected call of AddRoleForUserInDomain.
func (mr *MockPermissionServiceInterfaceMockRecorder) AddRoleForUserInDomain(domain, role, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleForUserInDomain", reflect.TypeOf((*MockPermissionServiceInterface)(nil).AddRoleForUserInDomain), domain, role, name)
}

// CreatePermission mocks base method.
func (m *MockPermissionServiceInterface) CreatePermission(arg0 valueobject.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockPermissionServiceInterfaceMockRecorder) CreatePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockPermissionServiceInterface)(nil).CreatePermission), arg0)
}

// DeletePermission mocks base method.
func (m *MockPermissionServiceInterface) DeletePermission(arg0 valueobject.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockPermissionServiceInterfaceMockRecorder) DeletePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockPermissionServiceInterface)(nil).DeletePermission), arg0)
}

// DeleteRoleForUserInDomain mocks base method.
func (m *MockPermissionServiceInterface) DeleteRoleForUserInDomain(domain, role, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleForUserInDomain", domain, role, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleForUserInDomain indicates an expected call of DeleteRoleForUserInDomain.
func (mr *MockPermissionServiceInterfaceMockRecorder) DeleteRoleForUserInDomain(domain, role, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleForUserInDomain", reflect.TypeOf((*MockPermissionServiceInterface)(nil).DeleteRoleForUserInDomain), domain, role, name)
}

// Enforce mocks base method.
func (m *MockPermissionServiceInterface) Enforce(permission valueobject.PermissionEnforce) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enforce", permission)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enforce indicates an expected call of Enforce.
func (mr *MockPermissionServiceInterfaceMockRecorder) Enforce(permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enforce", reflect.TypeOf((*MockPermissionServiceInterface)(nil).Enforce), permission)
}
