// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	valueobject "github.com/jacklv111/optimus/pkg/iam/login/value-object"
)

// MockloginServiceInterface is a mock of loginServiceInterface interface.
type MockloginServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockloginServiceInterfaceMockRecorder
}

// MockloginServiceInterfaceMockRecorder is the mock recorder for MockloginServiceInterface.
type MockloginServiceInterfaceMockRecorder struct {
	mock *MockloginServiceInterface
}

// NewMockloginServiceInterface creates a new mock instance.
func NewMockloginServiceInterface(ctrl *gomock.Controller) *MockloginServiceInterface {
	mock := &MockloginServiceInterface{ctrl: ctrl}
	mock.recorder = &MockloginServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloginServiceInterface) EXPECT() *MockloginServiceInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockloginServiceInterface) Login(domain, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", domain, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockloginServiceInterfaceMockRecorder) Login(domain, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockloginServiceInterface)(nil).Login), domain, username, password)
}

// ParseUserInfoFromToken mocks base method.
func (m *MockloginServiceInterface) ParseUserInfoFromToken(tokenString string) (valueobject.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUserInfoFromToken", tokenString)
	ret0, _ := ret[0].(valueobject.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUserInfoFromToken indicates an expected call of ParseUserInfoFromToken.
func (mr *MockloginServiceInterfaceMockRecorder) ParseUserInfoFromToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUserInfoFromToken", reflect.TypeOf((*MockloginServiceInterface)(nil).ParseUserInfoFromToken), tokenString)
}

// Signup mocks base method.
func (m *MockloginServiceInterface) Signup(info valueobject.SignupInfo) (valueobject.SignupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", info)
	ret0, _ := ret[0].(valueobject.SignupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockloginServiceInterfaceMockRecorder) Signup(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockloginServiceInterface)(nil).Signup), info)
}
