/*
 * iam
 *
 * iam api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jacklv111/common-sdk/errors"
	"github.com/jacklv111/common-sdk/log"
	"github.com/jacklv111/optimus/app/iam/view-object/openapi"
	"github.com/jacklv111/optimus/app/optimus/api"
	"github.com/jacklv111/optimus/pkg/iam/constant"
	loginsvc "github.com/jacklv111/optimus/pkg/iam/login/service"
	loginvb "github.com/jacklv111/optimus/pkg/iam/login/value-object"
	psvc "github.com/jacklv111/optimus/pkg/iam/permission/service"
	resmgmtsvc "github.com/jacklv111/optimus/pkg/resource-manager/optimus/service"
)

// Login - User login
func Login(c *gin.Context) {
	var req openapi.LoginRequest
	err := c.BindJSON(&req)
	if err != nil {
		log.Errorf("Error occurred when binding json %s", err)
		c.Error(errors.NewAppErr(INVALID_PARAMS, err, err.Error()))
		return
	}
	tokenString, err := loginsvc.LoginSvc.Login(req.Username, req.Username, req.Password)
	if err != nil {
		log.Errorf("login failed, error: %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}

	c.JSON(http.StatusOK, openapi.Login200Response{Token: tokenString})
}

// Signup - User signup
func Signup(c *gin.Context) {
	var req openapi.CreateUserRequest
	err := c.BindJSON(&req)
	if err != nil {
		log.Errorf("Error occurred when binding json %s", err)
		c.Error(errors.NewAppErr(INVALID_PARAMS, err, err.Error()))
		return
	}
	signupInfo := loginvb.SignupInfo{
		Domain:      req.Username,
		Name:        req.Username,
		Password:    req.Password,
		Email:       req.Email,
		IsAdmin:     true,
		IsForbidden: false,
	}

	signupRes, err := loginsvc.LoginSvc.Signup(signupInfo)

	if err != nil {
		log.Errorf("Error occurred when creating signupinfo %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}

	err = psvc.PermissionSvc.AddRoleForUserInDomain(signupRes.Domain, constant.ADMIN, signupRes.Name)

	if err != nil {
		log.Errorf("Error occurred when adding role for user %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	_, err = resmgmtsvc.ResMgmtSvc.Create(signupInfo.Domain, api.DEFAULT_WORKSPACE)
	if err != nil {
		log.Errorf("Error occurred when creating workspace %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	// assemble
	resp := openapi.Signup201Response{
		Id:       signupRes.ID,
		Username: signupRes.Name,
	}

	c.JSON(http.StatusCreated, resp)
}
