/*
 * optimus
 *
 * optimus api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jacklv111/common-sdk/errors"
	"github.com/jacklv111/common-sdk/log"
	"github.com/jacklv111/optimus/app/optimus/manager"
	"github.com/jacklv111/optimus/app/optimus/view-object/openapi"
	"github.com/jacklv111/optimus/pkg/dataset"
)

// CreateDatasetAnnotationTemplate - Create dataset annotation template
func CreateDatasetAnnotationTemplate(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	var req openapi.CreateAnnotationTemplateRequest
	err = c.BindJSON(&req)
	if err != nil {
		log.Errorf("Bind json failed, error: %s", err)
		c.Error(errors.NewAppErr(INVALID_PARAMS, err, err.Error()))
		return
	}
	err = manager.DatasetMgr.CreateDatasetAnnotationTemplate(userInfo, datasetId, req)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Create dataset annotation template failed, error: %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}

	c.Status(http.StatusCreated)
}

// GetDatasetAnnotationTemplate - Get dataset annotation template
func GetDatasetAnnotationTemplate(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	annoTempDetails, err := manager.DatasetMgr.GetDatasetAnnotationTemplate(userInfo, datasetId)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Get dataset annotation template failed, error: %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.JSON(http.StatusOK, annoTempDetails)
}

// UpdateDatasetAnnotationTemplate - Update dataset annotation template
func UpdateDatasetAnnotationTemplate(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	var req openapi.UpdateAnnotationTemplateRequest
	err = c.BindJSON(&req)
	if err != nil {
		log.Errorf("Bind json failed, error: %s", err)
		c.Error(errors.NewAppErr(INVALID_PARAMS, err, err.Error()))
		return
	}
	err = manager.DatasetMgr.UpdateDatasetAnnotationTemplate(userInfo, datasetId, req)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Update dataset annotation template failed, error: %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.Status(http.StatusOK)
}
