/*
 * optimus
 *
 * optimus api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"strings"
	"testing"

	"github.com/glebarez/sqlite"
	"github.com/golang/mock/gomock"
	"github.com/google/uuid"
	aifsclientgo "github.com/jacklv111/aifs-client-go"
	mockaifsclient "github.com/jacklv111/aifs-client-go/http-client/mock"
	aifsclient "github.com/jacklv111/common-sdk/client/aifs-client"
	"github.com/jacklv111/common-sdk/database"
	"github.com/jacklv111/common-sdk/log"
	testdata "github.com/jacklv111/optimus/app/optimus/api/test-data"
	"github.com/jacklv111/optimus/app/optimus/view-object/openapi"
	iamconst "github.com/jacklv111/optimus/pkg/iam/constant"
	loginsvc "github.com/jacklv111/optimus/pkg/iam/login/service"
	mocklogin "github.com/jacklv111/optimus/pkg/iam/login/service/mock"
	loginvb "github.com/jacklv111/optimus/pkg/iam/login/value-object"
	psvc "github.com/jacklv111/optimus/pkg/iam/permission/service"
	mockpsvc "github.com/jacklv111/optimus/pkg/iam/permission/service/mock"
	pvb "github.com/jacklv111/optimus/pkg/iam/permission/value-object"
	resmgmtsvc "github.com/jacklv111/optimus/pkg/resource-manager/optimus/service"
	mockresmgmt "github.com/jacklv111/optimus/pkg/resource-manager/optimus/service/mock"
	. "github.com/smartystreets/goconvey/convey"
	"gorm.io/gorm"
)

const (
	CREATE_DATASET_REQ                        = "./test-data/create_dataset_req.json"
	CREATE_DATASET_EMPTY_POOL                 = "./test-data/create_empty_data_pool.json"
	UPDATE_DATASET_REQ                        = "./test-data/update_dataset_req.json"
	CREATE_DATASET_ANNOTATION_TEMPLATE_REQ    = "./test-data/create_dataset_annotation_template_req.json"
	GET_DATASET_ANNOTATION_TEMPLATE_RESP_AIFS = "./test-data/get_dataset_annotation_template_resp_aifs.json"
	CREATE_DATASET_VERSION_FROM_POOL_REQ      = "./test-data/create_dataset_version_from_pool_req.json"
)

func TestMain(m *testing.M) {

	// Set up database connection
	// Initialize the Gorm adapter with an in-memory SQLite database
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to open database: %v", err)
	}

	database.Db = db

	// Run tests
	code := m.Run()

	// Exit with code from tests
	os.Exit(code)
}

func TestApiDataset(t *testing.T) {
	token := "mock token"
	mockUser := loginvb.UserInfo{
		Domain: "joker",
		Name:   "jack",
	}
	resMgmtId := uuid.New().String()

	log.ValidateAndApply(log.LogConfig)

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	mockResMgmt := mockresmgmt.NewMockResourceMgmtSvcInterface(ctrl)
	resmgmtsvc.ResMgmtSvc = mockResMgmt
	mockPermissionSvc := mockpsvc.NewMockPermissionServiceInterface(ctrl)
	psvc.PermissionSvc = mockPermissionSvc
	mockLoginSvc := mocklogin.NewMockloginServiceInterface(ctrl)
	loginsvc.LoginSvc = mockLoginSvc

	mockClient := mockaifsclient.NewMockHTTPClient(ctrl)
	err := aifsclient.InitAifsClientV3(mockClient)
	if err != nil {
		log.Fatal(err)
	}

	var datasetId string
	annoTempId := uuid.New().String()

	router := NewRouter()
	Convey("Test CreateDataset", t, func() {
		Convey("Test CreateDataset with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().CreatePermission(gomock.Any()).Do(func(p pvb.Permission) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				_, err := uuid.Parse(p.ResourceId)
				So(err, ShouldBeNil)
				datasetId = p.ResourceId
				So(p.Action, ShouldResemble, []string{"*"})
				So(p.Effect, ShouldEqual, iamconst.EFFECT_ALLOW)
			}).Return(nil)
			mockResMgmt.EXPECT().GetFirst(gomock.Eq(mockUser.Domain), gomock.Any()).Return(resMgmtId, nil)

			reqStr, _ := os.ReadFile(CREATE_DATASET_REQ)
			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("POST", "/api/open/v1/datasets", bytes.NewReader(reqStr))
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusCreated)
			var actualRes openapi.CreateDataset200Response
			err := json.Unmarshal(recorder.Body.Bytes(), &actualRes)
			So(err, ShouldBeNil)
			So(actualRes.Id, ShouldEqual, datasetId)
		})
	})

	Convey("Test updateDataset", t, func() {
		Convey("Test updateDataset with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldResemble, iamconst.UPDATE)
			}).Return(true, nil)

			reqStr, _ := os.ReadFile(UPDATE_DATASET_REQ)
			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("PUT", "/api/open/v1/datasets/"+datasetId, bytes.NewReader(reqStr))
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusOK)
			So(err, ShouldBeNil)
		})
	})

	Convey("Test CreateDataPool", t, func() {
		Convey("Test CreateDataPool with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldResemble, iamconst.UPDATE)
			}).Return(true, nil)

			poolRawDataViewId := uuid.New()
			createRawDataViewResp := aifsclientgo.NewCreateDataViewSuccessResp()
			createRawDataViewResp.SetDataViewId(poolRawDataViewId.String())
			createRawDataViewRespBytes, _ := json.Marshal(createRawDataViewResp)

			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				var aifsReq aifsclientgo.CreateDataViewRequest
				byteData, err := io.ReadAll(req.Body)
				defer req.Body.Close()
				So(err, ShouldBeNil)
				err = json.Unmarshal(byteData, &aifsReq)
				So(err, ShouldBeNil)
				So(aifsReq.GetRawDataType(), ShouldEqual, aifsclientgo.IMAGE)
				So(aifsReq.GetViewType(), ShouldEqual, aifsclientgo.RAW_DATA)
			}).Return(&http.Response{StatusCode: http.StatusCreated, Body: io.NopCloser(bytes.NewReader(createRawDataViewRespBytes)), Header: testdata.GetApplicationJsonHeader()}, nil)

			reqStr, _ := os.ReadFile(CREATE_DATASET_EMPTY_POOL)
			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("POST", fmt.Sprintf("/api/open/v1/datasets/%s/pools", datasetId), bytes.NewReader(reqStr))
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusCreated)
		})
	})

	Convey("Test create dataset version from pool", t, func() {
		Convey("Test create dataset version from pool with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldResemble, iamconst.UPDATE)
			}).Return(true, nil)

			divideResp := make([]aifsclientgo.DivideRawDataDataViewResponseInner, 0)
			{
				p := aifsclientgo.DivideRawDataDataViewResponseInner{}
				p.SetDataViewId(uuid.NewString())
				p.SetItemCount(70)
				p.SetName("test-update-dataset_train")
				divideResp = append(divideResp, p)
			}
			{
				p := aifsclientgo.DivideRawDataDataViewResponseInner{}
				p.SetDataViewId(uuid.NewString())
				p.SetItemCount(20)
				p.SetName("test-update-dataset_val")
				divideResp = append(divideResp, p)
			}
			{
				p := aifsclientgo.DivideRawDataDataViewResponseInner{}
				p.SetDataViewId(uuid.NewString())
				p.SetItemCount(10)
				p.SetName("test-update-dataset_test")
				divideResp = append(divideResp, p)
			}
			divideRespBytes, _ := json.Marshal(divideResp)
			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				var aifsReq []aifsclientgo.DivideRawDataDataViewRequestInner
				byteData, err := io.ReadAll(req.Body)
				defer req.Body.Close()
				So(err, ShouldBeNil)
				err = json.Unmarshal(byteData, &aifsReq)
				So(err, ShouldBeNil)
				So(req.Method, ShouldEqual, http.MethodPost)
				So(len(aifsReq), ShouldEqual, 3)

			}).Return(&http.Response{StatusCode: http.StatusOK, Body: io.NopCloser(bytes.NewReader(divideRespBytes)), Header: testdata.GetApplicationJsonHeader()}, nil)
			reqStr, _ := os.ReadFile(CREATE_DATASET_VERSION_FROM_POOL_REQ)
			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("POST", fmt.Sprintf("/api/open/v1/datasets/%s/versions", datasetId), bytes.NewReader(reqStr))
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusOK)
		})
	})

	Convey("Test Create dataset annotation template", t, func() {
		Convey("Test Create dataset annotation template with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldEqual, iamconst.UPDATE)
			}).Return(true, nil)

			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodPost)
				var aifsReq aifsclientgo.CreateAnnotationTemplateRequest
				byteData, err := io.ReadAll(req.Body)
				defer req.Body.Close()
				So(err, ShouldBeNil)
				err = json.Unmarshal(byteData, &aifsReq)
				So(err, ShouldBeNil)
				So(aifsReq.Name, ShouldEqual, "coco_det")
				So(aifsReq.Type, ShouldEqual, "coco-type")
				So(len(aifsReq.Labels), ShouldEqual, 80)
			}).Return(&http.Response{StatusCode: http.StatusCreated, Body: io.NopCloser(bytes.NewReader([]byte(fmt.Sprintf(`{"annotationTemplateId": "%s"}`, annoTempId)))), Header: testdata.GetApplicationJsonHeader()}, nil)

			reqStr, _ := os.ReadFile(CREATE_DATASET_ANNOTATION_TEMPLATE_REQ)
			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("POST", fmt.Sprintf("/api/open/v1/datasets/%s/annotation-template", datasetId), bytes.NewReader(reqStr))
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusCreated)
		})
	})

	Convey("Test Get dataset annotation template", t, func() {
		Convey("Test Get dataset annotation template with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldEqual, iamconst.GET_DETAILS)
			}).Return(true, nil)

			GetDatasetAnnotationTemplateResp := aifsclientgo.AnnotationTemplateDetails{}
			respStr, _ := os.ReadFile(GET_DATASET_ANNOTATION_TEMPLATE_RESP_AIFS)
			_ = json.Unmarshal(respStr, &GetDatasetAnnotationTemplateResp)
			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodGet)
				So(req.URL.Path, ShouldEqual, fmt.Sprintf("/api/open/v1/annotation-templates/%s/details", annoTempId))
			}).Return(&http.Response{StatusCode: http.StatusCreated, Body: io.NopCloser(bytes.NewReader([]byte(respStr))), Header: testdata.GetApplicationJsonHeader()}, nil)

			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("GET", fmt.Sprintf("/api/open/v1/datasets/%s/annotation-template", datasetId), nil)
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusOK)
			var resp openapi.AnnotationTemplateDetails
			err := json.Unmarshal(recorder.Body.Bytes(), &resp)
			So(err, ShouldBeNil)
			So(resp.Name, ShouldEqual, "coco_det")
			So(resp.Type, ShouldEqual, "coco-type")
			So(len(resp.Labels), ShouldEqual, 80)
		})
	})

	Convey("Test GetDatasetDetails", t, func() {
		Convey("Test GetDatasetDetails with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldEqual, iamconst.GET_DETAILS)
			}).Return(true, nil)

			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("GET", fmt.Sprintf("/api/open/v1/datasets/%s/details", datasetId), nil)
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)
			So(recorder.Code, ShouldEqual, http.StatusOK)
			var actualRes openapi.DatasetDetails
			err := json.Unmarshal(recorder.Body.Bytes(), &actualRes)
			So(err, ShouldBeNil)
			So(actualRes.Id, ShouldEqual, datasetId)
			So(actualRes.Name, ShouldEqual, "test-update-dataset")
			So(actualRes.CreatedAt, ShouldNotEqual, 0)
			So(actualRes.Description, ShouldEqual, "test-update-dataset description")
			So(actualRes.RawDataType, ShouldEqual, string(aifsclientgo.IMAGE))
			So(actualRes.AnnotationTemplateId, ShouldEqual, annoTempId)

			So(len(actualRes.Pools), ShouldEqual, 1)
			So(actualRes.Pools[0].Name, ShouldEqual, "test-pool-2")
			So(actualRes.Pools[0].Description, ShouldEqual, "create an empty pool")

			So(len(actualRes.Versions), ShouldEqual, 1)
			So(actualRes.Versions[0].Name, ShouldEqual, "test-update-dataset version 1")
			So(actualRes.Versions[0].Description, ShouldEqual, "test create version from pool")
		})
	})

	Convey("Test DeleteDataset", t, func() {
		Convey("Test DeleteDataset with valid request", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			mockPermissionSvc.EXPECT().Enforce(gomock.Any()).Do(func(p pvb.PermissionEnforce) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldEqual, iamconst.DELETE)
			}).Return(true, nil)
			mockPermissionSvc.EXPECT().DeletePermission(gomock.Any()).Do(func(p pvb.Permission) {
				So(p.Domain, ShouldEqual, mockUser.Domain)
				So(p.ResourceType, ShouldEqual, iamconst.RESOURCE_TYPE_DATASET)
				So(p.ResourceId, ShouldEqual, datasetId)
				So(p.Action, ShouldResemble, []string{"*"})
			}).Return(nil)

			// delete version data views
			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodDelete)
				So(strings.Contains(req.URL.Path, "data-views"), ShouldBeTrue)
			}).Return(&http.Response{StatusCode: http.StatusOK, Body: io.NopCloser(bytes.NewReader([]byte{})), Header: testdata.GetApplicationJsonHeader()}, nil)
			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodDelete)
				So(strings.Contains(req.URL.Path, "data-views"), ShouldBeTrue)
			}).Return(&http.Response{StatusCode: http.StatusOK, Body: io.NopCloser(bytes.NewReader([]byte{})), Header: testdata.GetApplicationJsonHeader()}, nil)
			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodDelete)
				So(strings.Contains(req.URL.Path, "data-views"), ShouldBeTrue)
			}).Return(&http.Response{StatusCode: http.StatusOK, Body: io.NopCloser(bytes.NewReader([]byte{})), Header: testdata.GetApplicationJsonHeader()}, nil)

			// delete pool data views
			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodDelete)
				So(strings.Contains(req.URL.Path, "data-views"), ShouldBeTrue)
			}).Return(&http.Response{StatusCode: http.StatusOK, Body: io.NopCloser(bytes.NewReader([]byte{})), Header: testdata.GetApplicationJsonHeader()}, nil)

			mockClient.EXPECT().Do(gomock.Any()).Do(func(req *http.Request) {
				So(req.Method, ShouldEqual, http.MethodDelete)
				So(req.URL.Path, ShouldEqual, fmt.Sprintf("/api/open/v1/annotation-templates/%s", annoTempId))
			}).Return(&http.Response{StatusCode: http.StatusOK, Body: io.NopCloser(bytes.NewReader([]byte{})), Header: testdata.GetApplicationJsonHeader()}, nil)

			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("DELETE", fmt.Sprintf("/api/open/v1/datasets/%s", datasetId), nil)
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)

			So(recorder.Code, ShouldEqual, http.StatusOK)
		})

		Convey("delete dataset which is not exist", func() {
			mockLoginSvc.EXPECT().ParseUserInfoFromToken(gomock.Eq(token)).Return(mockUser, nil)
			recorder := httptest.NewRecorder()
			req, _ := http.NewRequest("DELETE", fmt.Sprintf("/api/open/v1/datasets/%s", datasetId), nil)
			req.Header.Set(iamconst.AUTHORIZATION, token)
			router.ServeHTTP(recorder, req)

			So(recorder.Code, ShouldEqual, http.StatusNotFound)
		})
	})
}
