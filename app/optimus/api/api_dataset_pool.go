/*
 * optimus
 *
 * optimus api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jacklv111/common-sdk/errors"
	"github.com/jacklv111/common-sdk/log"
	"github.com/jacklv111/common-sdk/utils"
	"github.com/jacklv111/optimus/app/optimus"
	"github.com/jacklv111/optimus/app/optimus/manager"
	"github.com/jacklv111/optimus/app/optimus/view-object/openapi"
	"github.com/jacklv111/optimus/pkg/dataset"
)

// CreateDatasetPool - Create dataset pool
func CreateDatasetPool(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	var req openapi.CreateDatasetPoolRequest
	err = c.BindJSON(&req)
	if err != nil {
		log.Errorf("Bind json failed, error: %s", err)
		c.Error(errors.NewAppErr(optimus.INVALID_PARAMS, err, err.Error()))
		return
	}
	err = manager.DatasetMgr.CreateDatasetPool(userInfo, datasetId, req)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(optimus.NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Create dataset pool failed, error: %s", err)
		c.Error(errors.NewAppErr(optimus.UNDEFINED_ERROR, err, err.Error()))
		return
	}

	c.Status(http.StatusCreated)
}

// DeleteDataPoolItems - Delete dataset pool data items
func DeleteDataPoolItems(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	rawDataIdListStr, ok := c.GetQuery(RAW_DATA_ID_LIST)
	rawDataIdList := utils.ParseListStr(rawDataIdListStr, ok, ",")

	annotationIdListStr, ok := c.GetQuery(ANNOTATION_ID_LIST)
	annotationIdList := utils.ParseListStr(annotationIdListStr, ok, ",")

	poolName := c.Param(POOL_NAME)

	err = manager.DatasetMgr.DeletePoolDataItems(userInfo, datasetId, poolName, rawDataIdList, annotationIdList)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(optimus.NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Delete dataset data items failed, error: %s", err)
		c.Error(errors.NewAppErr(optimus.UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.Status(http.StatusOK)
}

// DeleteDatasetPool - Delete dataset pool
func DeleteDatasetPool(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	poolName := c.Param(POOL_NAME)
	err = manager.DatasetMgr.DeletePool(userInfo, datasetId, poolName)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(optimus.NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Delete dataset pool failed, error: %s", err)
		c.Error(errors.NewAppErr(optimus.UNDEFINED_ERROR, err, err.Error()))
		return
	}

	c.Status(http.StatusOK)
}

// UploadZipToPool - Upload raw data to dataset pool
func UploadZipToPool(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	poolName := c.Param(POOL_NAME)
	zipFormat := c.GetHeader(ZIP_FORMAT)

	defer c.Request.Body.Close()
	err = manager.DatasetMgr.UploadZipToPool(userInfo, datasetId, poolName, zipFormat, c.Request.Body)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(optimus.NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Upload zip to pool failed, error: %s", err)
		c.Error(errors.NewAppErr(optimus.UNDEFINED_ERROR, err, err.Error()))
		return
	}

	c.Status(http.StatusOK)
}

// GetDataPoolStatistics - Get data pool statistics
func GetDataPoolStatistics(c *gin.Context) {
	userInfo, err := getUserInfoAndHandleError(c)
	if err != nil {
		return
	}
	datasetId := c.Param(DATASET_ID)
	poolName := c.Param(POOL_NAME)

	res, err := manager.DatasetMgr.GetDataPoolStatistics(userInfo, datasetId, poolName)
	if err != nil {
		if err == dataset.ErrNotFound {
			c.Error(errors.NewAppErr(optimus.NOT_FOUND, err, err.Error()))
			return
		}
		log.Errorf("Get data pool statistics failed, error: %s", err)
		c.Error(errors.NewAppErr(optimus.UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.JSON(http.StatusOK, res)
}
